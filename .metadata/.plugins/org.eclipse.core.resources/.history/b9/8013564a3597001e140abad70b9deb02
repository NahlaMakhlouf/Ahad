package Pages;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;

public class SalesPage extends PageBase {

	public SalesPage(WebDriver driver) {
		super(driver);
	}

	private By salesPageTitle = By.xpath("//h1[@class='d-flex  align-items-center text-dark fw-bolder my-1 fs-3']");
	private By addNewSalesPageTitle = By.xpath("//div[@class=\"d-flex justify-content-center px-10 py-3 fs-6 \"] ");
	private By notificationsCount = By
			.xpath("//span[@class=\"pt-1 badge badge-md badge-circle badge-danger notification-number\"]");
	private By actionsBtn = By.id("actionsButton");
	private By addNewSalesBtn = By.id("add-sale-button");
	private By addNewSalesReturnBtn = By.id("add-sale-return-button");
	private By returnWithReference = By.id("kt_create_invoice_form_invoice_type_hasReference");
	private By returnWithoutReference = By.id("kt_create_invoice_form_invoice_type_hasNoReference");
	private By cashBack = By.id("kt_create_invoice_form_invoice_type_cashback");
	private By proceedBtn = By.xpath("//button[@type='submit']");
	private By referenceInvoiceNumberList = By.id("react-select-2-input");
	private By referenceInvoiceInput = By.id("react-select-7-placeholder");
	private By importSalesBtn = By.id("Import-invoices");
	private By totalNumberOfNumber = By.id("totalItemsNumber");
	private By invoiceStatusToggle = By.id("invoice_status");
	private By invoiceNumberField = By.id("invoice number");
	private By invoiceDateField = By.id("invoice_date_id");
	private By paymentDateField = By.id("payment_date_id");
	private By clientField = By.xpath("//input[@id ='react-select-2-input']");
	private By productField = By.xpath("//input[@id ='react-select-3-input']");
	private By vatRateField = By.xpath("//input[@id ='react-select-8-input']");
	private By saveAsDraftBtn = By.id("save_button");
	private By saveIssuedInvoiceBtn = By.id("approve_button");
	private By approveBtn = By.id("modal_approve");
	private By selectFileBtn = By.xpath("//input[@type=\"file\"]");
	private By submitBtn = By.id("submit");
	private By successMessage = By.xpath("//div[text()=\"تم رفع الملف بنجاح. سيتم عرض البيانات بعد إنتهاء العملية\"]");

	public String getPageTitle() {
		return driverWait.until(ExpectedConditions.visibilityOfElementLocated(salesPageTitle)).getText();
	}

	public int getTotalNumberOfItems() {
		return Integer.valueOf(
				driverWait.until(ExpectedConditions.visibilityOfElementLocated(totalNumberOfNumber)).getText());
	}

	public int getNotificationsCount() {
		return Integer
				.valueOf(driverWait.until(ExpectedConditions.visibilityOfElementLocated(notificationsCount)).getText());
	}

	public void openAddNewSales() {
		driverWait.until(ExpectedConditions.visibilityOfElementLocated(actionsBtn)).click();
		driverWait.until(ExpectedConditions.elementToBeClickable(addNewSalesBtn)).click();
	}

	public void openAddNewSalesReturn() {
		driverWait.until(ExpectedConditions.visibilityOfElementLocated(actionsBtn)).click();
		driverWait.until(ExpectedConditions.elementToBeClickable(addNewSalesReturnBtn)).click();
	}

	public void openImportSales() {
		driverWait.until(ExpectedConditions.visibilityOfElementLocated(actionsBtn)).click();
		driverWait.until(ExpectedConditions.elementToBeClickable(importSalesBtn)).click();
	}

	public String getAddNewSalesPageTitle() {
		return driverWait.until(ExpectedConditions.visibilityOfElementLocated(addNewSalesPageTitle)).getText();
	}

	public void addNewDraftInvoice(String invoiceDate, String paymentDate, String client, String product,
			String vatRate) throws InterruptedException {
		driver.findElement(invoiceDateField).sendKeys(invoiceDate);
		driver.findElement(invoiceDateField).sendKeys(Keys.ENTER);

		driver.findElement(paymentDateField).sendKeys(paymentDate);
		driver.findElement(paymentDateField).sendKeys(Keys.ENTER);

		driver.findElement(clientField).sendKeys(client);
		Thread.sleep(2000);
		driver.findElement(clientField).sendKeys(Keys.ENTER);

		driver.findElement(productField).sendKeys(product);
		Thread.sleep(3000);
		driver.findElement(productField).sendKeys(Keys.ENTER);

		driver.findElement(vatRateField).sendKeys(vatRate);
		Thread.sleep(3000);
		driver.findElement(vatRateField).sendKeys(Keys.ENTER);

		driver.findElement(saveAsDraftBtn).click();
	}

	public void addNewIssuedInvoice(String invoiceNumber, String invoiceDate, String paymentDate, String client,
			String product, String vatRate) throws InterruptedException {
		driverWait.until(ExpectedConditions.visibilityOfElementLocated(invoiceStatusToggle)).click();
		driverWait.until(ExpectedConditions.elementToBeClickable(invoiceNumberField)).sendKeys(invoiceNumber);

		driver.findElement(invoiceDateField).sendKeys(invoiceDate);
		driver.findElement(invoiceDateField).sendKeys(Keys.ENTER);

		driver.findElement(paymentDateField).sendKeys(paymentDate);
		driver.findElement(paymentDateField).sendKeys(Keys.ENTER);

		driver.findElement(clientField).sendKeys(client);
		Thread.sleep(2000);
		driver.findElement(clientField).sendKeys(Keys.ENTER);

		driver.findElement(productField).sendKeys(product);
		Thread.sleep(3000);
		driver.findElement(productField).sendKeys(Keys.ENTER);

		driver.findElement(vatRateField).sendKeys(vatRate);
		Thread.sleep(3000);
		driver.findElement(vatRateField).sendKeys(Keys.ENTER);

		driver.findElement(saveIssuedInvoiceBtn).click();
		driverWait.until(ExpectedConditions.elementToBeClickable(approveBtn)).click();
	}

	public void selectReturnWithReferenceInvoice(String referenceInvoiceNumber) throws InterruptedException {
		driverWait.until(ExpectedConditions.visibilityOfElementLocated(returnWithReference)).sendKeys(Keys.ENTER);
		driver.findElement(proceedBtn).click();
		driver.findElement(referenceInvoiceInput).click();
		Thread.sleep(2000);
		driverWait.until(ExpectedConditions.visibilityOfElementLocated(referenceInvoiceInput))
				.sendKeys(referenceInvoiceNumber);

		driverWait.until(ExpectedConditions.elementToBeClickable(proceedBtn)).click();

	}

	public void addNewDraftReturnWithReferenceInvoice() {

	}

	public void selectReturnWithNoReferenceInvoice() {
		driverWait.until(ExpectedConditions.elementToBeClickable(returnWithoutReference)).sendKeys(Keys.ENTER);
		Thread.sleep(2000);
		driver.findElement(proceedBtn).click();

	}

	public void addNewDraftReturnWithNoReferenceInvoice(String invoiceDate, String paymentDate, String client, String product,
				String vatRate) throws InterruptedException {
			driver.findElement(invoiceDateField).sendKeys(invoiceDate);
			driver.findElement(invoiceDateField).sendKeys(Keys.ENTER);

			driver.findElement(paymentDateField).sendKeys(paymentDate);
			driver.findElement(paymentDateField).sendKeys(Keys.ENTER);

			driver.findElement(clientField).sendKeys(client);
			Thread.sleep(2000);
			driver.findElement(clientField).sendKeys(Keys.ENTER);

			driver.findElement(productField).sendKeys(product);
			Thread.sleep(3000);
			driver.findElement(productField).sendKeys(Keys.ENTER);

			driver.findElement(vatRateField).sendKeys(vatRate);
			Thread.sleep(3000);
			driver.findElement(vatRateField).sendKeys(Keys.ENTER);

			driver.findElement(saveAsDraftBtn).click();
		}
		

	public void importSalesInvoices(String path) {
		var notificationCount = getNotificationsCount();
		driver.findElement(selectFileBtn).sendKeys(path);
		driverWait.until(ExpectedConditions.elementToBeClickable(submitBtn)).click();
		driverWait.until(ExpectedConditions.visibilityOfElementLocated(successMessage));
		driverWait.until(ExpectedConditions.invisibilityOfElementLocated(successMessage));

		do {
			driver.navigate().refresh();
		} while (getNotificationsCount() != notificationCount + 1);

	}

}
